<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2017 Annual Review]]></title>
    <url>%2F2017%2F12%2F25%2F2017-Annual-Review%2F</url>
    <content type="text"><![CDATA[Architecture &amp; Design微服务设计（Building Microservices）Medium简单了解微服务的建模、集成、测试、部署和监控。为毛只能说是简单了解？因为不被项目操练都不好意思说深入。。。 设计模式(Design Pattern)Advanced面向对象的内功心法。初始还是看Head First系列易懂，但是要深入也离不开这本书的提纲挈领。有时间慢慢深入看 领域驱动设计Advanced应对复杂领域软件的设计之道，领域驱动设计的经典之作，与企业设计模式并驾齐驱。注意与软件开发中的设计模式区分。对实践要求略高，结合工作经验食用更佳 尽在双11 - 阿里巴巴技术演进与超越Medium双11背后的工程师，精华技术概览与发展史。阿里双11的业务量和复杂度是大部分工程师未能参与的规模，由此书可以一窥各个系统随着大促八年的演进与提升 Code PracticeJava网络编程（Java Network Programming）Medium全面详细地引导你学习网络编程，涵盖TCP, UDP, SSL, NIO等各项内容，底层技术的探讨保持够用为止。批评者可能说这书详细得像个超长API文档（所以书非常厚重）。书里基本给齐了示例服务器的源码（亲测直接能跑），不吝篇幅 Java 8实战（Java 8 in Action）MediumJava支持函数式编程范式后如虎添翼，终于大步缩小了与其他JVM语言（如Clojure, Scala, Groovy）的差距（Doge脸）。Lambdas，流，函数式等特性都有很详细的介绍与示例，用了就回不去系列。。。当然书只能入门，主要还是得实践，从命令式切换到声明式编程并非易事，只能在实际的需求中多锻炼了。反正坚持不用for循环，有惊喜 实战Java高并发程序设计Advanced要求有一定Java基础，简练的语言结合详细的例子，介绍了并行计算的背景、Java并发的工具、锁优化、计算模式、Akka框架等等。做为Java并发实战补充着看也挺好的，并发需要了解的东西看这本书也能知道个大概，当然并发的学习从来不难在看书。。。线上打过堆栈的人都懂的 从Paxos到Zookeeper：分布式一致性原理与实践Advanced原理算法不明觉厉，实践很有启发。Zookeeper做为协调者与管理者的角色堪称分布式系统一致性的基石 MethodologyJava编程思想（Thinking in Java）Fundamental将这本书划为Fundamental良心上有点过不去，虽被认作是适合初学入门的指南，实际亦有深奥的部分，或许是为了呼应标题的编程思想。即使开发了两年再看仍有收获，相当于将语言的脉络了一遍。另外亦有容器、泛型等主题的深入研究如果要说有什么缺点的话，就是里面的部分内容对于Java新版本（Java 8, Java 9）已经不再适用了，权当了解 精通正则表达式（Mastering Regular Expression）Advanced屠龙宝刀。前端后端码农非码农，能掌握一些都能显著提升技能，并且深入一层有深入一层的威力。内容包括基本知识与主要Flavor： Perl、Java、.NET、PHP。 Effective JavaAdvanced以中文的价格买到影印的原版，超值，不看原文理解起来总觉得隔了一层。每一个Item由浅及深，不是单纯告诉一个Rule，而是从问题场景，到原始的解决方案，再到精练的方法，不止告诉了你如何解题，还讨论了各类解法的优劣。在一堆教你东西又不帮你搭建知识框架的书里，简直是业界清流 函数式编程思维（Functional Thinking）Medium用了四种JVM语言示例，讲述了函数式编程的概念与思想。语言的演化既要考虑到现实需求、硬件资源的支持，还要考虑到对旧有语言特性的兼容 Thought &amp; Meta knowledge软件随想录·卷1（Joel on Software）软件随想录·卷2（More Joel on Software）Fundamental作者本人的博客集。从项目管理的小细节到公司的大战略，还有手把手教你运营软件公司，应有尽有。普通码农不会想到的问题和没有机会遇到的事情 黑客与画家Fundamental又是大佬的随笔集，听大佬讲过去的故事。。。另外Lisp大法好 高效能人士的七个习惯Medium习惯都好，按需择用，重在实行 人类简史 - 从动物到上帝未来简史 - 从智人到智神Medium架构宏大，角度奇特，不专注于历史中的事件与人物，转而挖掘历史进程中的浪潮与脉络。未来简史则对历史抽丝剥茧，由此探讨人类的未来，科技将与人类共同进化。回顾历史是为了帮助我们认识现在，预测未来是为了了解我们的选择将引向怎样的新世界 枪炮、病菌与钢铁Advanced偏学术。宏大的历史进程,感受到了两点：一是冥冥中自有天定,各种族或文明的命运似乎在史前就有了定数；二是一方水土养一方人，人的性格和命运意识离不开地理的深远影响。可以选择感兴趣的主题来看，比如中国是怎样成为中国人的中国，国家是如何变得贫穷或富有 如何变得有思想Fundamental阮一峰的博客文集。跟IT关系不大，权当拓展 一网打尽（The Everything Store）Fundamental貌似也叫万货商店。贝佐斯与亚马逊的传记。可看可不看 天年Medium偶尔看看科幻开开脑洞，然而新出的长篇难得有经典。虽有小疵，收尾仓促，不掩其瑜。漫步银河是真实的星空，太阳系前行的路上也是人类真实的末日。期待续篇 三体X·观想之宙Fundamental不要买，买三体就好 技术元素科技想要什么新经济新规则Fundamental一千铁粉、科技体与生物、进化与发明发现的必然与偶然。不过感觉始终无法超越《失控》巅峰 Learn more study lessMediumA useful guidance for acquiring knowledge effectively and more importantly, to absorb the knowledge as your own idea. Build concepts from modules, and build connections to form a web of knowledge. Learn for real knowledge, not for the illusion that I’m studying.以前总觉得脑子不好使，现在也可以说是学习方法不好使了。笔记（整理思维而非知识）、实践（理解内涵而非行为）都很重要，更重要的是让知识生根（联结、建模、索引）和发芽（融合、激发、串联） Notes 元知识的重要性工欲善其事必先利其器Learn how to learn 读原版书/文档，至少知道常用概念对应的英文读得多点速度和理解会提升，不过毕竟不是母语，够用就好，也可以进行Speed Reading的练习提速原版书太贵，有电子版的配合Kindle使用也能接受，就是对主动性要求更高 Selection &amp; priority精力有限，合理安排，不懂先跳过 Learning the rules and learn when to break themAlso learn the context of rule and why we need them学习模式而不止于模式本身]]></content>
      <tags>
        <tag>Annual Review</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build your own blog on CentOS, based on Hexo + Next]]></title>
    <url>%2F2017%2F11%2F02%2FBuild-your-own-blog-on-CentOS-based-on-Hexo-Next%2F</url>
    <content type="text"><![CDATA[Prepare environmentAdd yum repo12# yum install -y gcc-c++ make# curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash - Install node and npm1# yum install nodejs Install git1# yum install git Validate installation123# node -v# npm -v # git --version Hexo siteInstall Hexo1$ npm install -g hexo-cli Create and init your siteCreating your site in your own folder 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install Mind the path when run npm install cmd Site folder12345678.├── _config.yml # Configuration of site(!!)├── package.json # npm installed packages├── scaffolds # template files├── source| ├── _drafts # Draft pages, omit| └── _posts # Website original pages└── themes # Website theme List generated files to check result Hello world12$ hexo generate # Generate static files$ hexo server # Start server, default port 4000 Or: 12$ hexo g # In short$ hexo s -p &lt;port&gt; # In short, specify port First blogCreate a new blog(in markdown format), if title contains white space, please use quotes 1$ hexo new &lt;titile&gt; It will create a new post with basic tags in path /source/_post Mind: no need to restart server after new/delete/modify posts One more step furtherCommon cmd1234567$ hexo new draft &lt;title&gt; # Create a new draft(like private posts)$ hexo publish &lt;filename&gt; # Publish drafts$ hexo clean # Clean cache and static files$ hexo deploy # deploy the site$ hexo list post/page/tag/category # List types Front-matterDefines variables of post 12345678910---title: Hello World # Title of post(may differ from filename)date: 2013/7/13 20:46:25 # Create datetags: # Tags of post, in YAML format- tag0- tag1categories: # Categories of post, in YAML format- API- Guide--- Multi-language support12new_post_name: :lang/:title.mdpermalink: :lang/:title/ When you create a new post, the post will be saved to: 12$ hexo new &quot;Hello World&quot; --lang tw# =&gt; source/_posts/tw/Hello-World.md and the URL will be: 1http://localhost:4000/tw/hello-world/ ThemesNew themeRecommend next, or you can find other themes instead Clone new theme to website folder 12$ cd &lt;folder&gt;$ git clone https://github.com/iissnan/hexo-theme-next themes/next Enable this theme in site /_config.yml 1theme: next Config themeUse next as example, others may be found on their website 1234language: zh-Hans # Set languageavatar: [URL] or under source/ # Set your own avatafavicon: [URL] # Use your own faviconauthor: &lt;nickname&gt; # Set your nickname, shown on page PluginsSome common plugins may enhance your website hexo-wordcount Count total words, minutes to read hexo-admin Provide admin pages to manage hexo site hexo-generator-search Index pages and provide local search ReferenceHexo Startup GuideNext Theme Getting Started]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux Command Line Basics]]></title>
    <url>%2F2017%2F08%2F17%2FLinux_Command_Line__Basics%2F</url>
    <content type="text"><![CDATA[Linux Command Line BasicsSystem Directory StructureCase sensitiveRoot path: / Path Detail /bin executable commands(for all users) /sbin super bin (for root) /boot startup, kernel /dev devices (files) /etc config files, pure text files /home user home dirctory /root root user home /lib library files /opt large software /proc process /sys hardware info /tmp temporary /usr user application /var variable, e.g log /media media /mnt mount File OperationsCreate New File$ &gt; newfile / &gt;&gt; new file $ touch newfile $ cat &gt; file Delete$ rm -rf * MofifyModify access time: $ touch filename Modify content: $ vi $ vim $ nano Move, Copy, Rename$ mv src dest $ cp src dest File Mode/PermissionPermission Groupsu: userg: groupo: othera: all users Permission Typesr: read, 4w: write, 2x: execute, 1 Permissions for Directoryr: read structurew: modify structurex: access directory(as working directory) Command$ chmod/ll $ lsattr/chattr $ umask Directory OperationsChange Directory$ cd $ pwd Special notation:. present directory.. parent directory~ home of present user~user home of this user/ root- last working directory Create path$ mkdir [-P] path With -P option, create parent path if not exist. Remove Directory$ rmdir [-P] path Command OperationsView previous commands(of present user): $ history Execute previous command: $ !num $ !! Search command: Ctrl + R]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup SFTP Server on Centos 6]]></title>
    <url>%2F2017%2F07%2F26%2FSetup_SFTP_Server%2F</url>
    <content type="text"><![CDATA[Set SFTP ServerEnv: Centos 6 StepAdd goup, user and permission# create a group for SFTP [root@dlp ~]# groupadd sftp_users # apply to a user &quot;mysftp&quot; for SFTP only [root@dlp ~]# usermod -G sftp_users mysftp # usermod bin(require ?) [root@dlp ~]# usermod -s /bin/false mysftp # chrooted home directory [root@dlp ~]# chown root:root mysftp # set permissions for home directory [root@dlp ~]# chmod 755 mysftp Update sshd config file[root@dlp ~]# vim /etc/ssh/sshd_config # line 132: comment out and add a line like below #Subsystem sftp /usr/libexec/openssh/sftp-server Subsystem sftp internal-sftp -f AUTH -l VERBOSE # add follows to the end Match Group sftp_users X11Forwarding no AllowTcpForwarding no ChrootDirectory %h ForceCommand internal-sftp [root@dlp ~]# /etc/rc.d/init.d/sshd restart # and make sure below PasswordAuthentication yes UsePAM yes Check connection[root@localhost ~]# sftp mysftp@10.200.159.83 Connecting to 10.200.159.83... mysftp@10.200.159.83&apos;s password: sftp&gt; ls downloads uploads sftp&gt; ll Invalid command. sftp&gt; ls -l drwxr-xr-x2 004096 Jul 10 00:22 downloads drwxr-xr-x2 004096 Jul 10 00:22 uploads sftp&gt; Mind SELinux and chrooted SFTPPossible error SFTP Error - Couldn’t read packet: Connection reset by peer Write failed: Broken pipe Couldn’t read packet: Connection reset by peer sftp Couldn’t get handle: Permission denied Check configuration. Network error: Software caused connection abort - FTP - FileZilla Do NOT chmod to 777/775 Couldn’t create directory: Permission denied(Cannot upload file/create dir) [root@dlp ~]# setsebool -P ssh_chroot_rw_homedirs on Java clientjsch:most common, jsch siteApache Common VFS:less doc and demo, based on jsch. If you need to handle multiple protocols, this is recommended.Apache Commons Virtual File System SiteVFS Proxysshj…]]></content>
      <categories>
        <category>VM配置</category>
      </categories>
      <tags>
        <tag>S/FTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup FTP Server on Centos 6]]></title>
    <url>%2F2017%2F07%2F26%2FSetup_FTP_Server%2F</url>
    <content type="text"><![CDATA[Set FTP ServerEnv: CentOS 6 StepInstall vsftpd(server) and ftp(client)[root@localhost ~]# sudo yum install -y vsftpd [root@localhost ~]# sudo yum install -y ftp Configurationvsftpd configuration file is /etc/vsftpd/vsftpd.conf, make sure options are set as follow: anonymous_enable=NO local_enable=YES # not allowed to visit other part of server chroot_local_user=YES Startup[root@localhost ~]# service vsftpd restart Extend to FTPSvsftpd may use SSL/TLS and serves as FTPS server. StepCreate certificate and key file[root@localhost ~]# mkdir /etc/ssl/private [root@localhost ~]# openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem Config key file to vsftpdOpen /etc/vsftpd/vsftpd.conf, set certificate file options: # SSL configuration # RSA rsa_cert_file=/etc/ssl/private/vsftpd.pem rsa_private_key_file=/etc/ssl/private/vsftpd.pem Enable SSL/TLS# SSL ssl_enable=YES allow_anon_ssl=NO force_local_data_ssl=YES force_local_logins_ssl=YES # TLS ssl_tlsv1=YES ssl_sslv2=NO ssl_sslv3=NO require_ssl_reuse=NO ssl_ciphers=HIGH Create user for accessSimiliar like user creation in SFTP server setup. Java ClientApache Commons NetApache Commons Net SiteUse FTPClient to connect FTP server, and use FTPSClient to connect FTPS server. Apache Common VFS:See SFTP server setup.]]></content>
      <categories>
        <category>VM配置</category>
      </categories>
      <tags>
        <tag>S/FTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CPU and Cache]]></title>
    <url>%2F2017%2F05%2F23%2FCPU-and-Cache%2F</url>
    <content type="text"><![CDATA[Linux perf软件性能诊断工具Use PMU, tracepoint and special counter in kernel Terms 硬件并行设计 CPU 流水线 | processor pipeline超标量 Superscalar乱序执行 reordering ?Based：相邻指令不依赖 分支预测 branch predict 预测最可能的下条指令对switch case效果不佳 硬件中加入 PMU performance monitor unit允许软件对某种硬件事件设置 counter， 超过预设值时中断 Trackpoint 散落在内核中的hook, 可被 trace/debug 工具使用，如 perf Usages perf listlist all monitor event Three types: Hardware event, generated by PMU, eg. cache miss Software event, generated by kernel, eg. context switch, tick Tracepoint event, triggered by static tracepoint in kernel, eg. counter for slab 分配器 perf statprovide overview for program running detail CPU bound 型 与 IO bound 型，调优不同 CPU1. CPU affinityCPU亲缘性 (soft and hard)Cause: most popular architecture for server is SMPand every CPU has its own cache (L1, L2)TO: avoid L1/L2 cache invalid(失效) caused by context switch 2. Cache barrierA memory barrier, is a type of barrier instruction, which causes a CPU or Compiler to enforce an ordering constraint on memory operations issued before and after the barrier instruction.一旦内存数据被推送到缓存，就会有消息协议来确保所有的缓存会对所有的共享数据同步并保持一致。这个使内存数据对CPU核可见的技术被称为内存屏障或内存栅栏volatile类型 写入之后插入store屏障，读取之前插入 load 屏障Why Memory Barrier？ Cache1. Cache coherency 缓存一致性 基本定律：在任意时刻，任意级别缓存中的缓存段的内容，等同于它对应的内存中的内容。write through 直写： 写入下级缓存write back 回写：仅修改本级缓存中数据，并标记为缓存段(Line)为脏段，触发回写优点：回写效率更高，过滤对同一地址的反复写操作回写定律：当所有的脏段被回写后，任意级别缓存中的缓存段的内容，等同于它对应的内存中的内容。 Ref: 缓存关联性（cache associativity），缓存组（cache sets），使用分配写（write-allocate）还是非分配写（上面我描述的直写是和分配写相结合的，而回写是和非分配写相结合的），非对齐的访问（unaligned access），基于虚拟地址的缓存。。。 2. 缓存一致性协议 Coherency protocols 解决多核心的多组缓存同步问题 窥探协议 snooping use by most device 基于目录的协议 directory-based 3. Buffer vs. CacheBuffer：一般用于写操作，可以称之为写缓冲Cache：一般用于读操作，可以称之为读缓存 4. Web 缓存体系1.1.2 基于目录的协议 directory-based Barrier, Visibility and MutexTerms 可见性：共享变量值，一个线程修改，其他能看见 共享变量：一个变量在多个线程的工作内存中都有副本 JMM（Java Memory Model）Java内存模型线程对共享变量的操作只能在工作内存中进行，不能直接读取主存可见性的实现：synchronize and volatilesynchronized 两点要求： unlock之前，共享变量必须刷新至主存 加锁时重新加载主存中的共享变量 Workflow of lock and unlock： 获得互斥锁 清空工作内存 从主存拷贝变量的最新副本到工作内存 执行代码 更新后的变量刷新到主存 释放互斥锁Q: 未更改的变量是否一同刷新？ 重排序代码书写顺序与实际执行顺序不同，可能的优化： 编译器优化重排序（编译器优化） 指令级并行重排序（处理器优化） 内存系统重排序（处理器优化）可能会导致：某些变量的操作会在后面的变量之前执行，比如终止条件后获取不到最终的结果值 解决：可用 volatile，即 as-if-serial，程序执行的结果与代码顺序执行的结果一致 Mutex 互斥机制 Synchronizewhen to use:writing a variable might be read by other threads;reading a variable might be written by other threads;both reader and writer must use same monitor lock 用途：Visibility and mutex volatile and visibilityvolatile 只能保证共享变量的可见性和读写操作的原子性？volatile 原理：volatile 类型的变量，转化为汇编后，增加 lock add1.. 指令, this will cause: write present processor cache line back to main memory write back action invalidates caches in other processors 安全地使用 volatile 变量： 对变量的操作不依赖当前值 不满足：count++；count=count+1;满足：Boolean变量，温度值等。 变量没有包含在其他变量的不变式中 不满足：不变式，low&lt;up. Atomic 原子性CPU原子性实现： 总线锁定eg. a thread execute i++ on CPU1, will lock bus - communication between memory and other CPU, to ensure other tasks not changing the value of i in memory,but other instructions will not execute during the lock. 缓存锁定only lock the address of variable in memory, and only allows CPU1 to write back new value, and invalidate the cache in other CPUs Java原子性实现使用CAS循环 Reference:TO Read互斥锁和内存可见性CON02-C. Do not use volatile as a synchronization primitiveMemory Barriers: a Hardware View for Software Hackers]]></content>
      <tags>
        <tag>Hardware</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Server Architecture]]></title>
    <url>%2F2017%2F05%2F23%2FServer-Architecture%2F</url>
    <content type="text"><![CDATA[1. Scalable Computing/Analysis1.1 Three architecture ?1.1.1 Shared-Nothing versus Shared-Everything Patterns for Distributed or Parallel computing big problems, break it down, computing unit which pattern to usetrader-off between compute and communication costs MPP? 1.1.2 Shared-Memory single machine, multiple processesApply in: GPU-based parallel-computing architecture Deep Learning multiple machinesRDMA (Remote direct memory access)data-center networkwarehouse-scale computing NUMA? 1.1.3 Shared-Storage in 80’s, NFS/DFS/Andrew today, SAN/NAS/Virtualized storage 2. Core elements in architecture架构核心要素，思维导图 Ref Book:大型网站技术架构 3. Server Architecture3.1 服务器三大体系结构Three architecture for business server Symmetric Multi-Processing (SMP) 主流服务器架构 对称多处理架构：多个CPU对称工作，无主次或从属关系 1234567Share same physical memory, access to any address takes same timeThus is also called: 一致存储访问结构Uniform Memory Access (UMA) Feature: sharingExtension: more memory, faster CPU, more CPU, more i/o, more deviceDefect: extension limitedBest practice: 2-4 CPUs Massively Parallel Processing (MPP) 海量并行处理结构: 多个SMP服务器（节点）互联而成 完全无共享结构(Share Nothing) Thus：扩展能力最好，目前512个节点，数千个CPU Non-Uniform Memory Access (NUMA) 非一致存储访问结构 Feature: 多个CPU模块，每个模块多个CPU 独立内存，I/O 通过互联模块（eg. crossbar switch) 连接和信息交互 支持上百个CPU Defects：远地内存延时太多 系统性能无法线性增加 MPP vs. NUMA Criteria MPP NUMA 节点互联机制 I/O inside same physical server 内存访问机制 access only local access to all, remote delays Usage data warehouse, i/o OLTP, little data, fast processing 服务器三大体系SMP、NUMA、MPP介绍 Transitioning from SMP to MPP, the why and the how Multi core basics: AMP and SMP Cluster Hardware Architecture 3.2 多核系统三大架构 SMP 一个操作系统的实例可以同时管理所有CPU内核，且应用并不绑定某一个内核 Asymmetric Multi-Processing (AMP) 非对称多处理架构 每个CPU内核可能运行一个独立的操作系统或同一操作系统的独立实例（instantiation） AMP vs. SMP Criteria AMP SMP 耦合 松耦合多CPU系统 紧耦合多CPU系统 OS one CPU, one OS multi CPU, share one OS Apply less more Bound Multi-Processing (BMP) 混合多处理架构 一个操作系统的实例可以同时管理所有CPU内核，但每个应用被锁定于某个指定的核心 3.3 补充 Seemingly, SMP(UMA), NUMA and MPP refers to CPU and RAM architecture And SMP, AMP, BMP refers to CPU and OS architecture More on 17-09-29:SMP: multiprocessor computer hardware and software architectureUMA: a shared memory architecture used in parallel computersUMA may use bus-based SMP arch or crossbar switches Intel 用了很牛的技术 SMT （同步多线程），一个CPU同时可以执行两个线程，如双核CPU可以有4个逻辑处理器 SMT(Simultaneous Multi-threading)Def: Permits multiple independent threads to execute simultaneously on the SAME core.Weaving together multiple “threads” on the same core SMT v.s. Hyper ThreadingSMT: an architecture feature of some processorsallows multiple thread to issue instructions on each cycle(same time ?)Hyper-Threading is a specific implementation of SMT. 4 Design of System4.1 Building blockdecomposition and combination分解和组合 System bus系统总线separate producer and consumer Routing路由external route: different input –&gt; |dispatch| –&gt; componentinternal route: service level, eg.consul, way like pattern matching Mind dataIdentify its ID before reaching Bus, called data normalization/data encapsulation QueueA special version of bus + route[optional] + storage ?amends for the speed collapse of consumer and producer Pub/SubAn candidate for routeManaged by Publisher ProtocolTo communicate though bus or queue, we need a protocol to define behaviour.like an SLA, service level agreement 4.2 vital services sweeping代谢exception close, restart, restore…eg. supervisor/child process in erlang, supervision tree(like nginx) High Availability Securitydivide into initiative and passive(主动安全与被动安全)Initiative: authentication/authorization + TLS + encrypt + minimum input/outputPassive: firewall Overdraft protection透支保护auto scaling/back pressure/Service degradation Reference:软件设计杂谈]]></content>
      <tags>
        <tag>OS</tag>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud Modules]]></title>
    <url>%2F2017%2F05%2F23%2FSpring-Cloud-Modules%2F</url>
    <content type="text"><![CDATA[Categories123456&lt;module&gt;eureka&lt;/module&gt; &lt;!-- Eureka server --&gt;&lt;module&gt;eureka-peer&lt;/module&gt; &lt;!-- Eureka server peer --&gt;&lt;module&gt;compute-supplier&lt;/module&gt; &lt;!-- service provider --&gt;&lt;module&gt;compute-supplier0&lt;/module&gt; &lt;!-- service provider replica --&gt;&lt;module&gt;ribbon-eureka&lt;/module&gt; &lt;!-- client side load balanced, with Hystrix as circuit breaker --&gt;&lt;module&gt;feign-eureka&lt;/module&gt; &lt;!-- Declarative REST client --&gt; Modules1. Eureka serverService discovery, part of Netflix OSS.Serves as server side, while rest serve as Eureka client. Peer AwarenessEureka-server and its replica eureka-server-peer. Config both peers to register each other:12345678client: fetch-registry: true # set true to register peers register-with-eureka: false # do not register itself as a client in standalone mode healthcheck: enabled: true service-url: #defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ defaultZone: http://eureka-server:8761/eureka/ While euraka-clients are only register to one of the server, both peers can sync registration info. You can have multiple peers to a system, as long as they are connected to each other by at least one edge, they will synchronize the registrations amongst themselves. Run the same server on two hosts, running it in different Spring profiles. HAClient may config multi servers or only one, peer wil sync automatically. If only one server configured, client loses registration once this server is down.If the first shutdown, then register second. defaultZone: http://localhost:8763/eureka/,http://localhost:8762/eureka/ Log: Request execution succeeded on retry #2 2. Compute supplierService provide, with its replica compute-supplier0. 3. Ribbon EurekaA client side IPC(Inter Process Communication)[RPC?] library. Providing: load balancing, fault tolerance, multiple protocol(HTTP, TCP, UDP) support in an asynchronous and reactive model, caching and batching.This client will act as consumer to call Compute supplier for service. 4. Feign EurekaA java to http client binder inspired by Retrofit, JAXR-2.0.Declarative(?)Making writing Web Service client easier.This client acts as Feign consumer Caution:spring-boot-devtools will cause Feign @Autowired NullPointerException, which will can be solved by adding @ImportAutoConfiguration(FeignAutoConfiguration.class) to main app of Feign consumer. 5. Zuul GatewaySupport reverse proxy and filter]]></content>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Integrate Spring Boot with Docker]]></title>
    <url>%2F2017%2F05%2F23%2FIntegrate-Spring-Boot-with-Docker%2F</url>
    <content type="text"><![CDATA[Integrate Spring Boot with DockerFind latest version in repository spring-boot-docker. PrepareWe need: a Docker daemon server installed on Linux host(or VM) a spring-boot project to be integated into Docker a Docker Hub account Version:Docker 1.12.0Maven 3.3Spring Boot 1.4.2.RELEASEdocker-maven-plugin spotify 0.4.11 Procedure1. Docker daemon serverversion: 1.12.0, based on Linux kernel 3.xIn this case, CentOS 7. 1.1 CA Generate CAFollow this guide, Protect Docker daemon socket Mind:Make sure your IP is added into extfile.cnf. 1.2 Startup and connection Start up daemon with certificate mode: $ dockerd –tlsverify –tlscacert=ca.pem –tlscert=server-cert.pem –tlskey=server-key.pem \-H=0.0.0.0:2376 Test connection: $ docker –tlsverify –tlscacert=ca.pem –tlscert=cert.pem –tlskey=key.pem \-H=$HOST:2376 version Possible error: Cannot connect to the Docker daemon. Is the docker daemon running on this host? Solution: check ip or firewalld, use curl command to detect. 2. Spring BootYou can use Gradle or Maven to integerate with docker, in this case, we use Maven 3.x. 2.1 pom.xml config12345678910111213141516171819202122232425262728&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;docker-maven.version&#125;&lt;/version&gt; &lt;configuration&gt; &lt;!-- Connect config for Windows Boot2docker --&gt; &lt;!-- Mind!! Unable to push from this docker daemon server, unknown reason --&gt; &lt;!--&lt;dockerHost&gt;https://192.168.59.103:2376&lt;/dockerHost&gt; &lt;dockerCertPath&gt;C:\Users\DT266\.boot2docker\certs\boot2docker-vm&lt;/dockerCertPath&gt;--&gt; &lt;!-- Connect config for Linux docker server --&gt; &lt;!-- Mind!! docker daemon must start in secure mode, and CA must include local ip --&gt; &lt;dockerHost&gt;https://10.200.157.84:2376&lt;/dockerHost&gt; &lt;!-- Use certs on local machine --&gt; &lt;!--&lt;dockerCertPath&gt;C:\Users\DT266\.docker&lt;/dockerCertPath&gt;--&gt; &lt;!-- Use certs in project folder --&gt; &lt;dockerCertPath&gt;docker/certs&lt;/dockerCertPath&gt; &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/imageName&gt; &lt;imageTags&gt;v1&lt;/imageTags&gt; &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt;&lt;/plugin&gt; 2.2 build commandBuild docker image(and you’ll find result on docker daemon server): mvn -X clean package docker:build Follow this guide, Spring Boot with Docker Possible error: javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection? Solution: Check if daemon server is startup in secure mode. This error may occur when daemon start without certificate. 3. Images managementCheck images: docker image (Requires tls secure by default configuration, or use “docker –tlsverify –tlscacert=ca.pem –tlscert=cert.pem –tlskey=key.pem -H=$HOST:2376 image” instead) Start up with specified name (spring-boot) and port mapping(visit 8080 of host to reach 8080 of container): docker run –name spring-boot -d -p 8080:8080 skyvoice/spring-boot-docker Visit http://your-docker-host:8080/docker to check result. Push this image into your Hub: docker login docker push skyvoice/spring-boot-docker (Requires an account in Docker Hub and a prepared repository named spring-boot-docker. New version of Docker will not auto create repository any more.)]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker Note]]></title>
    <url>%2F2017%2F04%2F17%2FDocker-Note%2F</url>
    <content type="text"><![CDATA[1. Install on CentOSRequires Kernel 3.0+, and update library before install Install on CentOS Guidance 2. Introduction2.1 Usagecontainer, isolate applicationspackaged with all its dependencies and libraries(environment) 2.2 Workflow Get codes and dependencies tio container Configure network or storage(optional) Upload builds to a registry Swarm cluster and scale(optional) Deploy A kind of namespace tool?Concentrates on 调度 and 编排 ？ 2.3 Structure2.3.1 Components Docker ClientUI, communicate with Daemon Docker Daemonsits on host, answers request Docker Indexcentralized registry 2.3.2 Elements Docker Containersresponsible for app’s running, including OS, user files and meta data Docker Imagesread-only templates, help launch Docker containers DOckerFilefile housing instructions, help automate image creation Docker Structure 2.3.3 Support by OS Namespacesfirst level of isolation Control Groupsa part of LXC(Linux Control), an OS level virtualization method for running multiple isolated Linux systems(containers) UnionFSfile system docker namespaces –&gt; namespaces –&gt; physical memory ? 2.3.4 Docker RegistryShelve progress: Docker入门教程（四）Docker Registry And official doc and guide:RA_CI with Docker Hello world in a container 3. Official getstarted3.1 starter run a hello world to checkrun: create &amp; run a containerhello-world: image to load into the containeroption -rm means .. 1$ sudo docker run hello-word list all containersimage: is a filesystem and parameters to use at runtimedoesn’t have state and never changesContainer: a running instance of an image 1$ docker ps -a Find image in Docker HubDocker Hub Build your own image 1234567891011121314$ touch DockerfileContents:FROM docker/whalesay:latestRUN apt-get -y update &amp;&amp; apt-get install -y fortunesCMD /usr/games/fortune -a | cowsayThen build an image from Dockerfile:$ docker build -t docker-whale .The procedure:1. Docker check things available: send context to Docker daemon2. load image defined in FROM3. RUN4. CMD Push image to Hub/repositorysign up for Docker Hubcreate a repository for imagepush image to online 123$ docker tag 292ad9b8d884 skyvoice/docker-whale:latest$ docker login$ docker push skyvoice/docker-whale 3.2 Manage images list images 1$ docker images remove image 12$ docker rmi -f 7d9495d03763$ docker rmi -f docker-whale daemonized container 1234567891011121314query Docker daemon, list containers[docker@dockermount docker]$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES657b964200ef ubuntu &quot;/bin/sh -c &apos;while tr&quot; About a minute ago Up About a minute suspicious_kilbyOr add flag -l, show only last container started.add flag -a, show all containers.add flag -q, show container ids only.We can use NAME of this container to query execution logs:[docker@dockermount docker]$ docker logs suspicious_kilbyIt looks inside the container, and shows the standard output of a container.And to stop this container:[docker@dockermount docker]$ docker stop suspicious_kilby 3.3 Run container Run command 1$ docker run ubuntu /bin/echo &apos;hello ubuntu&apos; Run interactive container 1$ docker run -t -i ubuntu /bin/bash -t assigns a pseudo-tty or terminal inside the container-i grabd teh standard input[STDIN] of the container, allow you to make an interactive connection 3.4 Run application123456789101112131415See port mapping:$ docker port #name 5000View logs:$ docker logs -f #nameList processes:$ docker top #nameStop and remove$ docker stop #name$ docker rm #nameRemove all container:$ docker rm $(docker ps -aq) Note Removing a container is final(cannot undo) 3.5 Network container Name your container: 1$ docker run -d -P --name web training/webapp python app.py Docker provides two network drivers: bridge(Default) and overlay.Use network sub command to list them: 1$ docker network ls View Network info of container: 1[docker@dockermount ~]$ docker network inspect bridge Create your own network: 1[docker@dockermount ~]$ docker network create -d bridge my-bridge-net Connect your newly running container to this network: 1[docker@dockermount ~]$ docker network connect my-bridge-net web Then try ping each other in two containers: 1$ docker exec -it db bash Note You can attach many network to a container, but two containers can reach other only in the same network 3.6 Manage data in containerData volumeA specially-designed directory, within one or more containers that bypasses the Union File System(operates by creating layers, making them very lightweight and fast)Designed to persist data, even container is removed Add a data volume to container:1[docker@dockermount ~]$ docker run -d -P --name web -v /webapp training/webapp python app.py To be continue…. 3.7 Docker Certicates for both daemon and clientFor detailed procedures:Protect the Docker daemon socker Note By default, Docker runs via a non-networked Unix socket. Config using an HTTP socket if you need communicate. $HOST in the doc is the ip addr of daemon server, not dns 1$ echo subjectAltName = IP:10.200.157.84,IP:10.200.157.48,IP:127.0.0.1 &gt; extfile.cnf To integrate with Spring boot on Windows, plz install docker-install.exe and DockerToolbox-1.12.2.exe. They will auto create a vm with installed docker.[Update 2016-11-15]Boot2docker cannot push images into Hub, for unknown reason.Use Linux Docker daemon server instead. Connect to docker VM by docker/tcuser 4. NoticeAdvantages containers are immutablesame image tested by QA will reach production environment with same behaviour container are lightweightmemory footprint of it is small container are fastDO NOT treat containers as virtual machines Mentra containers are disposable/ephemeral Try to Avoid dont store data dont ship application in two pieces dont crate large imagesdont install unnecessary packages or run “update” dont use a single layer imageuse layered filesystem, username definition, runtime installation, configuration and then applicationeasier to recreate, manage and distribute dont create images from running containers dont use only “lastest” taglike “SNAPSHOT”, unsafe and irretrievable dont run more than on process in a single container dont store credentials in imageuse environment variables dont run processes as root dont rely on IP addressesuse environment variables Reference:10 things to avoid in docker containers Benefits Try new Tech at low costUsing images in the Hub Test and run with consistency Build a dev environment To Be continueManage data in container]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7.2 Install & Config]]></title>
    <url>%2F2017%2F02%2F15%2FCentos7.2_Install_%26_Config%2F</url>
    <content type="text"><![CDATA[1. 手动分区1234/boot for 200m ext4swap for 2G swap/home for 2G ext4/ the rest 2. IP addr1ifconfig not found CentOS 7 minimal systems, use the commands “ip addr” and “ip link” to find the details of a network interface card. To know the statistics use “ip -s link”. Install ifconfig 12yum provides ifconfigyum install net-tools Mind: BOTH ifconfig and netstat is obsolete, use ip and ss instead. 3. 配置静态IP地址 查看网络管理器服务的状态： 1[root@localhost network-scripts]# systemctl status NetworkManager.service 查看网络管理器管理的网络接口: (for eno167 is our goal) 1234[root@localhost network-scripts]# nmcli dev statusDEVICE TYPE STATE CONNECTIONeno16777736 ethernet connected eno16777736lo loopback unmanaged -- 修改配置文件 1vim /etc/sysconfig/network-scripts/eno16777736 12345678910111213141516171819202122*BOOTPROTO=&quot;static&quot;DEFROUTE=&quot;yes&quot;IPV4_FAILURE_FATAL=&quot;no&quot;IPV6INIT=&quot;yes&quot;IPV6_AUTOCONF=&quot;yes&quot;IPV6_DEFROUTE=&quot;yes&quot;IPV6_FAILURE_FATAL=&quot;no&quot;NAME=&quot;eno16777736&quot;UUID=&quot;4c9bca38-d727-4352-b5c9-a4be75a8ed62&quot;DEVICE=&quot;eno16777736&quot;ONBOOT=&quot;yes&quot;PEERDNS=&quot;yes&quot;PEERROUTES=&quot;yes&quot;IPV6_PEERDNS=&quot;yes&quot;IPV6_PEERROUTES=&quot;yes&quot;IPV6_PRIVACY=&quot;no&quot;*NM_CONTROLLED=no #不通过网络管理器管理*IPADDR=192.168.1.15 #must*DNS1=&#123;DNS&#125;*IPADDR=10.200.157.84*NETMASK=255.255.255.0*DNS1=10.133.1.254 重启网络服务： 1systemctl restart network.service ping connect: Network is unreachable 1ping -c 4 192.168.1.9 用指令dhclient來與DHCP連線: 1$ dhclient yum “Couldn’t resolve host ‘mirrorlist.centos.org’” for CentOS 6 12345# vim /etc/resolv.confAnd append: nameserver 8.8.8.8 nameserver 8.8.4.4 nameserver 127.0.0.1 If still failed to connect outer network: 123456789/etc/sysconfig/network:NETWORKING=yesHOSTNAME=centos7GATEWAY=10.0.0.1/etc/resolv.conf:nameserver 8.8.8.8nameserver 8.8.4.4 Destination unreachable / No route to host / 断网等各种事件因为VM ware Bridge 模式无法使用，在虚拟机网络编辑器里重置默认值，然后在win10宿主机中为VM net的属性中选上Bridge protocol. 究极大法：Shutdown all VMs, Reboot Host, Reset VMware adapter, Boot VMs, Shutdown firewall 4. Install lrzsz Error1Error downloading packages: lrzsz-0.12.20-36.el7.x86_64: [Errno 256] No more mirrors to try. Try this: 12$ yum clean all$ yum makecache and dhclient if necessary 5. 防火墙问题Visit tomcaat at http://192.168.1.15:8080/ failed.Caused by firewall, stop or disable it: 1$ systemctl stop firewalld.service OR123[root@localhost ~]# systemctl disable firewalld.serviceRemoved symlink /etc/systemd/system/basic.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service. OR 允许8080端口流量通过 1firewall-cmd --zone= --add-port=8080/tcp --permanent 参考： 1234firewall-cmd --state # 检查防火墙状态firewall-cmd --add-service=http --permanent # 允许服务流量通过防火墙，后跟 --permanent 为永久修改，否则重载以后就不失效了firewall-cmd --zone= --add-port=80/tcp --permanent # 允许端口流量通过防火墙firewall-cmd --reload # 重新加载防火墙 Red Hat 防火墙使用 6. Hostname 修改1[root@localhost ~]# hostnamectl set-hostname master15 查看结果(静态、瞬态和灵活主机名): 1$ hostnamectl status 注意 对于静态/瞬态主机名，任何特殊字符或空格都会被移除，字母转小字。修改静态主机名，/etc/hostname 将被自动更新。但/etc/hosts需要手动更新。 7. User and SSHInitial new server by new user and SSH:New Server Initial 8. Configuring Basic FirewallStart up firewalld:1sudo systemctl start firewalld Allow SSH with default port:1sudo firewall-cmd --permanent --add-service=ssh Timezone config:12345sudo timedatectlsudo timedatectl set-timezone Asia/Shanghaintpdate time.windows.com hwclock -w]]></content>
      <categories>
        <category>VM配置</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos6.5 Install & Config]]></title>
    <url>%2F2016%2F10%2F19%2FCentos6.5_Install_%26_Config%2F</url>
    <content type="text"><![CDATA[Centos6.5Basic Install1. install tomcat, jdk, nginx12345[root@localhost temp]# tar -zxvf apache-tomcat-7.0.68.tar.gz -C ../tomcat[root@localhost temp]# wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.37.zip[root@localhost pcre-8.37]# yum install gcc gcc-c++ autoconf make[root@localhost pcre-8.37]# ./configure &amp; make &amp; make install[root@localhost temp]# ./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/nginx.conf Simplier way to install nginx First, install Extra Packages for Enterprise Linux1$ sudo yum install epel-release Then, install nginx:1$ sudo yum install nginx Then, start ngix:1$ sudo /etc/init.d/nginx start Config here:1$ sudo vim /etc/nginx/nginx.conf Shutdown:1$ nginx -s quit 注意：普通用户无法启动 nginx, 其端口为80，1024以下的端口只有 root 能监听，有些文件也无法访问 解决：切换 root 用户, /usr/sbin：12# chown root nginx# chmod u+s nginx nginx startup cmd 12[root@localhost ~]# /usr/local/nginx/sbin/nginx[root@localhost ~]# netstat -ano |grep 80 2. Install tomcat as a serviceChange to the /etc/init.d directory and create a script called ‘tomcat’ as shown below.12[root@srv6 share]# cd /etc/init.d[root@srv6 init.d]# vi tomcat And here is the script we will use. 1234567891011121314151617181920212223#!/bin/bash# description: Tomcat Start Stop Restart# processname: tomcat# chkconfig: 234 20 80JAVA_HOME=/usr/java/jdk1.7.0_05export JAVA_HOMEPATH=$JAVA_HOME/bin:$PATHexport PATHCATALINA_HOME=/usr/share/apache-tomcat-7.0.29case $1 instart)sh $CATALINA_HOME/bin/startup.sh;;stop)sh $CATALINA_HOME/bin/shutdown.sh;;restart)sh $CATALINA_HOME/bin/shutdown.shsh $CATALINA_HOME/bin/startup.sh;;esacexit 0 Tomcat install reference url 123[root@srv6 init.d]# chmod 755 tomcat[root@srv6 init.d]# chkconfig --add tomcat[root@srv6 init.d]# chkconfig --level 234 tomcat on reference url 3. Install Redis12[root@nginx redis]# make &amp;&amp; make install[root@nginx redis]# redis-server /etc/redis/redis.conf 1vi /etc/redis/redis.conf 仅修改： daemonize yes （no–&gt;yes） 1echo &quot;/usr/local/bin/redis-server /etc/redis/redis.conf &amp;&quot; &gt;&gt; /etc/rc.local CentOS6 安装 Redis 4. install mysql查看 mysql： 1yum list | grep mysql 安装： 1yum install mysql-server mysql mysql-devel 查看安装结果： 1[root@nginx ~]# rpm -qi mysql-server 首次启动： 1[root@nginx ~]# service mysqld start Set a password: 1[root@nginx ~]# /usr/bin/mysqladmin -u root password 123456 设置开机自启动： 1[root@nginx ~]# chkconfig mysqld on 5. install varnish使用epel源 1[root@localhost bin]# rpm -ivh http://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm check varnish: 1[root@localhost bin]# yum list|grep varnish Startup: 1[root@localhost bin]# service varnish start Check: 1[root@localhost bin]# varnishd -V For more details: Varnish official User Guide 6. Install Mavenwget and tar and config the env. For mvnw: https://github.com/takari/maven-wrapper 1. Install ZooKeeper 启动 1zookeeper-3.4.6/bin/zkServer.sh start 输入jps命令查看进程 121573 QuorumPeerMain1654 Jps Configuration1. Set time zone123[root@demo81 Asia]# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime[root@demo81 Asia]# vim /etc/sysconfig/clock Add line: 1UTC=false or no — The hardware clock is set to local time. Reload: 123[root@demo81 Asia]# /etc/init.d/ntpd restartOR:[root@dlp ~]# source /etc/sysconfig/clock Check: 12[root@demo81 Asia]# date 2016年 05月 26日 星期四 09:36:10 CST 2. 环境变量 $PATH12345# echo &apos;pathmunge /usr/local/maven/bin&apos; &gt; /etc/profile.d/mvn.sh# chmod +x /etc/profile.d/mvn.sh# . /etc/profile# echo $PATH/usr/local/maven/bin:/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/jdk/bin:/usr/local/jdk/jre/bin:/root/bin:/usr/local/jdk/bin:/usr/local/jdk/jre/bin pathmunge 是redhat版本中系统变量profile中的函数，判断当前系统是否有此命令，如果没有，放置在之前或之后 ？ 3. vim Vim show line number 显示行号 1234Find vimrc file:$ whereis vimrc$ sudo vim /etc/vimrcAdd: set nu! Vim 查找单词配置： set insearch 使用 /word 查找单词 vim 深造]]></content>
      <categories>
        <category>VM配置</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
</search>